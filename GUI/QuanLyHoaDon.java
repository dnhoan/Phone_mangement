/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BUS.Models.BusHoaDon;
import BUS.Models.BusVoucherModel;
import BUS.Services.BusImeiService;
import BUS.Services.CTHoaDonService;
import BUS.Services.HoaDonService;
import BUS.Services.SanPhamService;
import BUS.Services.VoucherService;
import DAL.Models.DalImeiModel;
import GUI.Models.CartModel;
import static GUI.QuanLyBanHang.currentMahd;
import GUI.Services.AuthService;
import GUI.Services.ButtonColumn;
import GUI.Services.DateService;
import GUI.Services.MessageService;
import GUI.Services.UtilityService;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ADMIN
 */
public class QuanLyHoaDon extends javax.swing.JInternalFrame {

    static Icon iconBackUp = new ImageIcon();
    static Icon iconDelete = new ImageIcon();
    CTHoaDonService cTHoaDonService = new CTHoaDonService();

    public QuanLyHoaDon() {
        initComponents();
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        Toolkit t = Toolkit.getDefaultToolkit();
        Dimension d = t.getScreenSize();
        int h = d.height;
        int w = d.width;
        this.setSize(w, h);
        iconBackUp = new ImageIcon(getClass().getResource("/icon/curve-arrow.png"));
        iconDelete = new ImageIcon(getClass().getResource("/icon/bin.png"));
        desginTable();
        this.init();
    }

    public void desginTable() {
        tblHoaDon.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 15));
        tblHoaDon.getTableHeader().setOpaque(false);
        tblHoaDon.getTableHeader().setBackground(new Color(25, 29, 74));
        tblHoaDon.getTableHeader().setForeground(Color.WHITE);
        tblHoaDon.setGridColor(new Color(25, 29, 74));
        tblHoaDon.setSelectionBackground(new Color(38, 117, 191));
        tblHoaDon.setShowGrid(true);
        tblImei.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 15));
        tblImei.getTableHeader().setOpaque(false);
        tblImei.getTableHeader().setBackground(new Color(25, 29, 74));
        tblImei.getTableHeader().setForeground(Color.WHITE);
        tblImei.setGridColor(new Color(25, 29, 74));
        tblImei.setSelectionBackground(new Color(38, 117, 191));
        tblImei.setShowGrid(true);
        tblSanPham.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 15));
        tblSanPham.getTableHeader().setOpaque(false);
        tblSanPham.getTableHeader().setBackground(new Color(25, 29, 74));
        tblSanPham.getTableHeader().setForeground(Color.WHITE);
        tblSanPham.setGridColor(new Color(25, 29, 74));
        tblSanPham.setSelectionBackground(new Color(38, 117, 191));
        tblSanPham.setShowGrid(true);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        txtSearchHD = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblImei = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        btnTraHang = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboStatusHoadon = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        lblCount = new javax.swing.JLabel();
        cboImei = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblHoaDon.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tblHoaDon.setForeground(new java.awt.Color(25, 29, 74));
        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "MaHD", "Khách hàng", "Sđt KH", "Mã nv", "Ngày tạo", "Ngày thanh toán", "SL", "Tổng tiền hàng", "Phí vận chuyển", "Giảm theo hóa đơn", "Tổng tiền hóa đơn", "Ghi chú", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHoaDon.setGridColor(new java.awt.Color(25, 29, 74));
        tblHoaDon.setRowHeight(30);
        tblHoaDon.getTableHeader().setReorderingAllowed(false);
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHoaDon);
        if (tblHoaDon.getColumnModel().getColumnCount() > 0) {
            tblHoaDon.getColumnModel().getColumn(0).setMinWidth(0);
            tblHoaDon.getColumnModel().getColumn(0).setMaxWidth(0);
            tblHoaDon.getColumnModel().getColumn(1).setMinWidth(150);
            tblHoaDon.getColumnModel().getColumn(1).setMaxWidth(150);
            tblHoaDon.getColumnModel().getColumn(2).setMinWidth(100);
            tblHoaDon.getColumnModel().getColumn(2).setMaxWidth(100);
            tblHoaDon.getColumnModel().getColumn(3).setMinWidth(70);
            tblHoaDon.getColumnModel().getColumn(3).setMaxWidth(70);
            tblHoaDon.getColumnModel().getColumn(4).setMinWidth(100);
            tblHoaDon.getColumnModel().getColumn(4).setMaxWidth(100);
            tblHoaDon.getColumnModel().getColumn(5).setMinWidth(150);
            tblHoaDon.getColumnModel().getColumn(5).setMaxWidth(150);
            tblHoaDon.getColumnModel().getColumn(6).setMinWidth(40);
            tblHoaDon.getColumnModel().getColumn(6).setMaxWidth(40);
            tblHoaDon.getColumnModel().getColumn(7).setMinWidth(150);
            tblHoaDon.getColumnModel().getColumn(7).setMaxWidth(150);
            tblHoaDon.getColumnModel().getColumn(8).setMinWidth(150);
            tblHoaDon.getColumnModel().getColumn(8).setMaxWidth(150);
            tblHoaDon.getColumnModel().getColumn(9).setMinWidth(150);
            tblHoaDon.getColumnModel().getColumn(9).setMaxWidth(150);
            tblHoaDon.getColumnModel().getColumn(10).setMinWidth(150);
            tblHoaDon.getColumnModel().getColumn(10).setMaxWidth(150);
            tblHoaDon.getColumnModel().getColumn(12).setMinWidth(50);
            tblHoaDon.getColumnModel().getColumn(12).setMaxWidth(50);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 1600, 450));

        txtSearchHD.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtSearchHD.setForeground(new java.awt.Color(25, 29, 74));
        txtSearchHD.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(5, 10, 46)));
        txtSearchHD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchHDKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearchHD, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 377, 36));

        jButton1.setBackground(new java.awt.Color(25, 29, 74));
        jButton1.setForeground(new java.awt.Color(25, 29, 74));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/excel.png"))); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(25, 29, 74), 30));
        jButton1.setBorderPainted(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1430, 140, 180, 41));

        tblImei.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tblImei.setForeground(new java.awt.Color(25, 29, 74));
        tblImei.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "MaImei", "Imei"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblImei.setGridColor(new java.awt.Color(25, 29, 74));
        tblImei.setRowHeight(30);
        tblImei.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblImeiMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblImei);
        if (tblImei.getColumnModel().getColumnCount() > 0) {
            tblImei.getColumnModel().getColumn(0).setMinWidth(0);
            tblImei.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 680, 380, 240));

        txtGhiChu.setColumns(20);
        txtGhiChu.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        txtGhiChu.setForeground(new java.awt.Color(25, 29, 74));
        txtGhiChu.setRows(5);
        txtGhiChu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(5, 10, 46)));
        txtGhiChu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGhiChuKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(txtGhiChu);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 680, 330, 100));

        btnTraHang.setBackground(new java.awt.Color(25, 29, 74));
        btnTraHang.setForeground(new java.awt.Color(25, 29, 74));
        btnTraHang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/returnsgood.png"))); // NOI18N
        btnTraHang.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(25, 29, 74), 30));
        btnTraHang.setBorderPainted(false);
        btnTraHang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTraHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraHangActionPerformed(evt);
            }
        });
        getContentPane().add(btnTraHang, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 880, 330, 41));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(5, 10, 46));
        jLabel2.setText("Sản phẩm");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 660, 80, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(5, 10, 46));
        jLabel3.setText("Imei");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 660, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(5, 10, 46));
        jLabel4.setText("Lý do đổi máy");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 660, -1, -1));

        cboStatusHoadon.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboStatusHoadon.setForeground(new java.awt.Color(25, 29, 74));
        cboStatusHoadon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hiện tại", "Đã xóa" }));
        cboStatusHoadon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(5, 10, 46), 2));
        cboStatusHoadon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboStatusHoadonItemStateChanged(evt);
            }
        });
        getContentPane().add(cboStatusHoadon, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, 229, 36));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(5, 10, 46));
        jLabel5.setText("Tìm kiếm");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(5, 10, 46));
        jLabel6.setText("Trạng thái hóa đơn");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, -1, -1));

        jPanel3.setBackground(new java.awt.Color(25, 29, 74));
        jPanel3.setPreferredSize(new java.awt.Dimension(1870, 100));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Hóa đơn");

        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1903, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 114));

        tblSanPham.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tblSanPham.setForeground(new java.awt.Color(25, 29, 74));
        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Masp", "Tên sp", "Giá bán", "Sale/1 SP", "SL", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPham.setGridColor(new java.awt.Color(25, 29, 74));
        tblSanPham.setRowHeight(30);
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSanPham);
        if (tblSanPham.getColumnModel().getColumnCount() > 0) {
            tblSanPham.getColumnModel().getColumn(0).setMinWidth(0);
            tblSanPham.getColumnModel().getColumn(0).setMaxWidth(0);
            tblSanPham.getColumnModel().getColumn(2).setMinWidth(120);
            tblSanPham.getColumnModel().getColumn(2).setMaxWidth(120);
            tblSanPham.getColumnModel().getColumn(3).setMinWidth(120);
            tblSanPham.getColumnModel().getColumn(3).setMaxWidth(120);
            tblSanPham.getColumnModel().getColumn(4).setMinWidth(50);
            tblSanPham.getColumnModel().getColumn(4).setMaxWidth(50);
            tblSanPham.getColumnModel().getColumn(5).setMinWidth(120);
            tblSanPham.getColumnModel().getColumn(5).setMaxWidth(120);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 680, 870, 240));

        lblCount.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblCount.setForeground(new java.awt.Color(5, 10, 46));
        getContentPane().add(lblCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 780, 308, 28));

        cboImei.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboImei.setForeground(new java.awt.Color(25, 29, 74));
        cboImei.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cboImei.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboImeiItemStateChanged(evt);
            }
        });
        getContentPane().add(cboImei, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 830, 330, 36));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(5, 10, 46));
        jLabel8.setText("Chọn Imei máy muốn đổi");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 810, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboStatusHoadonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboStatusHoadonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
//            int status = cboStatusHoadon.getSelectedIndex();
//            currentSelectedHoaDon = status;
            getDataHoaDon();
            buttonRemoveHoaDon();
        }
    }//GEN-LAST:event_cboStatusHoadonItemStateChanged

    private void txtSearchHDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchHDKeyReleased
        this.getDataHoaDon();
    }//GEN-LAST:event_txtSearchHDKeyReleased

    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        if (evt.getClickCount() == 1) {
            clearForm();
            currentRowHoaDon = tblHoaDon.getSelectedRow();
            this.currentMaHd = (int) tblHoaDon.getValueAt(currentRowHoaDon, 0);
            this.getDataSanPhamByMahd();
        }
    }//GEN-LAST:event_tblHoaDonMouseClicked

    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseClicked
        if (evt.getClickCount() == 1) {
            int currentRowSanPham = tblSanPham.getSelectedRow();
            this.currentMactsp = (int) tblSanPham.getValueAt(currentRowSanPham, 0);
            this.getDataImeiByMactsp();
        }
    }//GEN-LAST:event_tblSanPhamMouseClicked

    private void txtGhiChuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGhiChuKeyReleased
        if (!txtGhiChu.getText().trim().isBlank() && !txtGhiChu.getText().trim().isEmpty()) {
            btnTraHang.setEnabled(true);
            lblCount.setText("Số ký tự: " + txtGhiChu.getText().trim().length() + "/30");
        } else {
            lblCount.setText("");
            btnTraHang.setEnabled(false);
        }
    }//GEN-LAST:event_txtGhiChuKeyReleased

    private void tblImeiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblImeiMouseClicked
        txtGhiChu.setEnabled(true);
        int row = tblImei.getSelectedRow();
        if (row >= 0) {
            currentImeiSelected = listImei.get(row);
            txtGhiChu.setEnabled(true);
        }
    }//GEN-LAST:event_tblImeiMouseClicked

    private void cboImeiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboImeiItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {

        }
    }//GEN-LAST:event_cboImeiItemStateChanged

    private void btnTraHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraHangActionPerformed
        if (validateForm()) {
            doiHang();
        }
    }//GEN-LAST:event_btnTraHangActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        xuatfile();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void changeColor(JButton hover, Color rand) {
        hover.setBackground(rand);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnTraHang;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoa1;
    public static javax.swing.JComboBox<String> cboImei;
    public static javax.swing.JComboBox<String> cboStatusHoadon;
    public static javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    public static javax.swing.JLabel lblCount;
    public static javax.swing.JTable tblHoaDon;
    public static javax.swing.JTable tblImei;
    public static javax.swing.JTable tblSanPham;
    public static javax.swing.JTextArea txtGhiChu;
    public static javax.swing.JTextField txtSearchHD;
    // End of variables declaration//GEN-END:variables
//    static int currentSelectedHoaDon = 0;
    static int currentMaHd = -1;
    static int currentMactsp = -1;
    static DalImeiModel currentImeiSelected;
    static int currentRowHoaDon = -1;
    static Date currentDate = new Date();
    static HoaDonService hoaDonService = new HoaDonService();
    static SanPhamService sanPhamService = new SanPhamService();
    static DefaultComboBoxModel<DalImeiModel> imeiModel;
    static DefaultTableModel modelHoaDon;
    static DefaultTableModel modelSanPham;
    static DefaultTableModel modelImei;
    static List<BusHoaDon> listHoaDon = new ArrayList<>();
    static List<BusHoaDon> listFilterHoaDon = new ArrayList<>();
    static List<CartModel> listCart = new ArrayList<>();
    static List<DalImeiModel> listImei = new ArrayList<>();
    static VoucherService voucherService = new VoucherService();

    void init() {
        getDataHoaDon();
        buttonRemoveHoaDon();
    }

    public static void getDataHoaDon() {
        try {
            String term = txtSearchHD.getText();
            int statusHoaDon = cboStatusHoadon.getSelectedIndex();
            listHoaDon = hoaDonService.getAllHoaDon(term, statusHoaDon);
        } catch (Exception e) {
        }
        fillTableHoaDon(listHoaDon);
    }

    static void clearForm() {
//        currentSelectedHoaDon = 0;
        currentMaHd = -1;
        currentMactsp = -1;
        currentImeiSelected = null;
        currentRowHoaDon = -1;
        modelSanPham = (DefaultTableModel) tblSanPham.getModel();
        modelSanPham.setRowCount(0);
        modelImei = (DefaultTableModel) tblImei.getModel();
        modelImei.setRowCount(0);
        txtGhiChu.setText("");
        txtGhiChu.setEnabled(false);
        btnTraHang.setEnabled(false);
        lblCount.setText("");
        cboImei.removeAllItems();
    }

    static void fillTableHoaDon(List<BusHoaDon> listShow) {
        clearForm();
        modelHoaDon = (DefaultTableModel) tblHoaDon.getModel();
        modelHoaDon.setRowCount(0);
        if (listShow != null) {
            listShow.forEach((hd) -> {
                modelHoaDon.addRow(new Object[]{
                    hd.getMahd(),
                    hd.getKhachHangModel().getTenKH(),
                    hd.getKhachHangModel().getSDT(),
                    hd.getNhanVienModel().getMaNV(),
                    DateService.toString(hd.getNgayTao(), "dd-MM-yyyy"),
                    DateService.toString(hd.getNgayThanhToan(), "dd-MM-yyyy"),
                    hd.getSoLuong(),
                    UtilityService.toVnd(hd.getTongTien()),
                    UtilityService.toVnd(hd.getPhiVanChuyen()),
                    UtilityService.toVnd(hd.getTiemKhuyenMai()),
                    UtilityService.toVnd(hd.getTienKhachTra()),
                    hd.getGhiChu(),
                    cboStatusHoadon.getSelectedIndex() == 1 ? iconBackUp : iconDelete
                });
            });
        }
    }

    void getDataSanPhamByMahd() {
        try {
            this.listCart = sanPhamService.selectSpByMahd(currentMaHd);
            if (listCart.size() > 0) {
                listCart.forEach(cart -> {
//                    lấy danh sách imei by masp
                    List<DalImeiModel> dalImeiModels = BusImeiService.getImeisByMactspAndMahd(cart.getMactsp(), currentMaHd);
                    cart.setListImeis(dalImeiModels);
                    cart.setTongTienHang(dalImeiModels.size() * cart.getGia());
                    BusVoucherModel busVoucherModel;
//                            lấy voucher đã lưu của sản phẩm trong db
                    busVoucherModel = voucherService.selectVoucherByMaImei(dalImeiModels.get(0).getMaSpSale());
                    if (busVoucherModel == null) {
                        cart.setTongTien(cart.getTongTienHang());
                        cart.getListImeis().forEach(imei -> {
                            imei.setMaSpSale(0);
                        });
                        cart.setSoLuongGiam(0);
                        cart.setGiamTheoTien(true);
                    } else {
                        float tongTienSauSale;
                        if (busVoucherModel.getLoaiGG() == 1) {
                            tongTienSauSale = cart.getTongTienHang() - ((cart.getGia() * busVoucherModel.getMucGG() / 100) * cart.getListImeis().size());
                        } else {
                            tongTienSauSale = cart.getTongTienHang() - (busVoucherModel.getMucGG() * cart.getListImeis().size());
                        }
                        cart.setSoLuongGiam(busVoucherModel.getMucGG());
                        cart.setGiamTheoTien(busVoucherModel.getLoaiGG() == 0);
                        cart.setTongTien(tongTienSauSale);
                    }
                });
            }
            fillTableSanPham();
        } catch (Exception e) {
        }
    }

    void fillTableSanPham() {
        currentMactsp = -1;
        modelSanPham = (DefaultTableModel) tblSanPham.getModel();
        modelSanPham.setRowCount(0);
        for (CartModel ca : listCart) {
            modelSanPham.addRow(new Object[]{
                ca.getMactsp(),
                ca.getTensp(),
                UtilityService.toVnd(ca.getGia()),
                (ca.isGiamTheoTien() ? UtilityService.toVnd(ca.getSoLuongGiam()) : ca.getSoLuongGiam() + " %"),
                ca.getListImeis().size(),
                UtilityService.toVnd(ca.getTongTien())
            });
        }
    }

    void getDataImeiByMactsp() {
        try {
            BusImeiService.fillComboImeiDoihang(imeiModel, cboImei, currentMactsp);
            listImei = BusImeiService.getImeisByMactspAndMahd(currentMactsp, currentMaHd);
            fillTableImei();
        } catch (Exception e) {
        }
    }

    void fillTableImei() {
        modelImei = (DefaultTableModel) tblImei.getModel();
        modelImei.setRowCount(0);
        txtGhiChu.setText("");
        lblCount.setText("");
        btnTraHang.setEnabled(false);
        currentImeiSelected = null;
        this.listImei.forEach(imei -> {
            modelImei.addRow(new Object[]{
                imei.getMaImei(),
                imei.getTenImei()
            });
        });
    }

    void doiHang() {
        try {
            DalImeiModel newImei = (DalImeiModel) cboImei.getSelectedItem();
            String ghiChu = txtGhiChu.getText();
            String commit = AuthService.user.getMaNV() + " " + DateService.toString(new Date(), "ss:mm:hh dd/MM/yyyy");
            if (BusImeiService.updateGhiChuImei(currentImeiSelected.getMaImei(), newImei.getMaImei(), ghiChu + "\n " + commit, currentImeiSelected.getMaSpSale())) {
                MessageService.alert(rootPane, "Đổi sản phẩm thành công");
                getDataImeiByMactsp();
            } else {
                MessageService.alert(rootPane, "Lỗi đổi hàng");
            }
        } catch (Exception e) {
            MessageService.alert(rootPane, "Lỗi đổi hàng");
        }
    }

    public boolean validateForm() {
        if (txtGhiChu.getText().length() < 30) {
            MessageService.alert(rootPane, "Vui lòng nhập lý do đổi máy tối thiểu 30 ký tự");
            return false;
        }
        Date ngayThanhToan = DateService.toDate(tblHoaDon.getValueAt(currentRowHoaDon, 4) + "", "dd-MM-yyyy");
        long diff = currentDate.getTime() - ngayThanhToan.getTime();
        int khoangNgay = (int) TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
        if (khoangNgay > 30) {
            MessageService.alert(rootPane, "Hóa đơn này đã hết hạn đổi trả");
            return false;
        }
        return true;
    }

//    private void delete() {
//        if (AuthService.isManager()) {
//            int row = tblHoaDon.getSelectedRow();
//            int mahd = Integer.parseInt(tblHoaDon.getValueAt(row, 0) + "");
//            int statusHoaDon = cboStatusHoadon.getSelectedIndex();
//            if (statusHoaDon == 1) {
//            } else {
//                if (hoaDonService.isXoaHoaDon(mahd)) {
//                    if (MessageService.confirm(rootPane, "Bạn có thực sự muốn xóa hóa đơn này không !")) {
//                        new LyDoXoaHD(mahd, 0).setVisible(true);
//                    }
//                } else {
//                    MessageService.alert(rootPane, "Không thể xóa hóa đơn này do đã thanh toán được hơn 7 ngày @");
//                }
//            }
//            getDataHoaDon();
//        } else {
//            MessageService.alert(rootPane, "Bạn không có quyền chỉnh sửa hóa đơn này @");
//        }
//    }
    private void buttonRemoveHoaDon() {
        Action add = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (AuthService.isManager()) {
                    int row = tblHoaDon.getSelectedRow();
                    int mahd = Integer.parseInt(tblHoaDon.getValueAt(row, 0) + "");
                    int statusHoaDon = cboStatusHoadon.getSelectedIndex();
                    if (statusHoaDon == 1) {
                        if (hoaDonService.isBackUpHoaDon(mahd)) {
                            if (MessageService.confirm(rootPane, "Bạn có muốn khôi phục hóa đơn này không !")) {
                                new LyDoXoaHD(mahd, 1).setVisible(true);
                            }
                        } else {
                            MessageService.alert(rootPane, "Sản phẩm trong hóa đơn này đã có người mua không thể khôi phục được @");
                        }
                    } else {
                        if (hoaDonService.isXoaHoaDon(mahd)) {
                            if (MessageService.confirm(rootPane, "Bạn có thực sự muốn xóa hóa đơn này không !")) {
                                new LyDoXoaHD(mahd, 0).setVisible(true);
                            }
                        } else {
                            MessageService.alert(rootPane, "Không thể xóa hóa đơn này do đã thanh toán được hơn 7 ngày @");
                        }
                    }
                    getDataHoaDon();
                } else {
                    MessageService.alert(rootPane, "Bạn không có quyền chỉnh sửa hóa đơn này @");
                }
            }
        };
        ButtonColumn buttonColumn = new ButtonColumn(tblHoaDon, add, 12);
        buttonColumn.setMnemonic(KeyEvent.VK_D);
    }

    public void xuatfile() {
        JFileChooser chooser = new JFileChooser();
        int i = chooser.showSaveDialog(chooser);
        if (i == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            try {
                FileWriter out = new FileWriter(file + ".xls");
                BufferedWriter bwrite = new BufferedWriter(out);
                DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
                // ten Cot
                for (int j = 0; j < tblHoaDon.getColumnCount() - 1; j++) {
                    bwrite.write(model.getColumnName(j) + "\t");
                }
                bwrite.write("\n");
                // Lay du lieu dong
                for (int j = 0; j < tblHoaDon.getRowCount(); j++) {
                    for (int k = 0; k < tblHoaDon.getColumnCount() - 1; k++) {
                        bwrite.write(model.getValueAt(j, k) + "\t");
                    }
                    bwrite.write("\n");
                }
                bwrite.close();

                JOptionPane.showMessageDialog(null, "Lưu file thành công!");
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, "Lỗi khi lưu file!");
            }
        }
    }
}
